import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from neural_network import NeuralNetworkPredictor

class DiseasePrediction:
    def __init__(self, parent_app):
        self.parent_app = parent_app
        self.root = parent_app.root
        self.predictor = NeuralNetworkPredictor()
        
    def show_prediction_window(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
        # –û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill='both', expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(main_frame)
        header_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(header_frame, text="–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ COVID-19", 
                font=('Arial', 20, 'bold')).pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        tk.Button(header_frame, text="–ù–∞–∑–∞–¥", font=('Arial', 14),
                 command=self.parent_app.create_main_window).pack(side='right')
        
        # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient_frame = tk.Frame(main_frame)
        patient_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(patient_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", 
                font=('Arial', 16, 'bold')).pack(anchor='w')
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        self.patient_combo = ttk.Combobox(patient_frame, font=('Arial', 14), width=50)
        self.patient_combo.pack(pady=10, anchor='w')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        self.load_patients()
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        predict_button = tk.Button(patient_frame, text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏", 
                                  font=('Arial', 16, 'bold'),
                                  bg='lightgreen',
                                  command=self.make_prediction)
        predict_button.pack(pady=20, anchor='w')
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame = tk.Frame(main_frame)
        self.results_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
    def load_patients(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            cursor.execute("SELECT id, surname, name, patronymic FROM patients")
            patients = cursor.fetchall()
            
            patient_list = []
            for patient in patients:
                full_name = f"{patient[1]} {patient[2]} {patient[3] or ''}".strip()
                patient_list.append(f"{patient[0]} - {full_name}")
            
            self.patient_combo['values'] = patient_list
            
            conn.close()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
    
    def make_prediction(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.patient_combo.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient_id = int(self.patient_combo.get().split(' - ')[0])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            diagnostic_data = self.check_diagnostic_data(patient_id)
            
            if not diagnostic_data['has_data']:
                self.show_no_diagnostic_data_warning(diagnostic_data)
                return
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for widget in self.results_frame.winfo_children():
                widget.destroy()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
            predictions = self.predictor.predict_disease_risk(patient_id)
            
            if not predictions:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
                return
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.display_predictions(predictions, diagnostic_data)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def check_diagnostic_data(self, patient_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        import sqlite3
        
        diagnostic_data = {
            'has_data': False,
            'available_data': [],
            'missing_data': []
        }
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            data_types = [
                ('anamnesis_extended', '–ê–Ω–∞–º–Ω–µ–∑'),
                ('blood_tests', '–ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏'),
                ('urine_tests_new', '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏'),
                ('ecg_data', '–≠–ö–ì'),
                ('echo_data', '–≠–•–û-–ö–ì'),
                ('comorbidities', '–ö–æ–º–æ—Ä–±–∏–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è')
            ]
            
            for table_name, display_name in data_types:
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table_name} WHERE patient_id = ?", (patient_id,))
                    count = cursor.fetchone()[0]
                    
                    if count > 0:
                        diagnostic_data['available_data'].append(display_name)
                    else:
                        diagnostic_data['missing_data'].append(display_name)
                except:
                    # –¢–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                    diagnostic_data['missing_data'].append(display_name)
            
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 —Ç–∏–ø–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            diagnostic_data['has_data'] = len(diagnostic_data['available_data']) >= 2
            
            conn.close()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return diagnostic_data
    
    def show_no_diagnostic_data_warning(self, diagnostic_data):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warning_label = tk.Label(self.results_frame, 
                                text="‚ö†Ô∏è –ù–ï–í–û–ó–ú–û–ñ–ù–û –ü–†–û–í–ï–°–¢–ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï ‚ö†Ô∏è",
                                font=('Arial', 18, 'bold'),
                                fg='red')
        warning_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        main_message = tk.Label(self.results_frame, 
                               text="–ê –±–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å?\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–µ–≥–æ?\n–ù–∞–≤–µ—Ä–Ω–æ–µ, –Ω–µ–ª—å–∑—è –∂–µ, –¥–∞? üòÖ",
                               font=('Arial', 16),
                               fg='darkred',
                               justify='center')
        main_message.pack(pady=15)
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation_frame = tk.LabelFrame(self.results_frame, 
                                        text="–ü–û–ß–ï–ú–£ –ù–£–ñ–ù–´ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï",
                                        font=('Arial', 14, 'bold'),
                                        fg='darkblue')
        explanation_frame.pack(fill='x', padx=20, pady=15)
        
        explanations = [
            "üî¨ –ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤",
            "üß™ –ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏ –≤—ã—è–≤–ª—è—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—á–∫–∞–º–∏ –∏ –æ–±–º–µ–Ω–æ–º –≤–µ—â–µ—Å—Ç–≤", 
            "‚ù§Ô∏è –≠–ö–ì –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã",
            "ü´Ä –≠–•–û-–ö–ì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞",
            "üìã –ê–Ω–∞–º–Ω–µ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö",
            "üè• –ö–æ–º–æ—Ä–±–∏–¥–Ω–æ—Å—Ç–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∏—Å–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
        ]
        
        for explanation in explanations:
            exp_label = tk.Label(explanation_frame, 
                               text=explanation,
                               font=('Arial', 12),
                               anchor='w')
            exp_label.pack(anchor='w', padx=15, pady=3)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if diagnostic_data['available_data']:
            available_frame = tk.LabelFrame(self.results_frame, 
                                          text="–ò–ú–ï–Æ–©–ò–ï–°–Ø –î–ê–ù–ù–´–ï",
                                          font=('Arial', 14, 'bold'),
                                          fg='darkgreen')
            available_frame.pack(fill='x', padx=20, pady=10)
            
            for data_type in diagnostic_data['available_data']:
                data_label = tk.Label(available_frame, 
                                    text=f"‚úÖ {data_type}",
                                    font=('Arial', 12),
                                    fg='green',
                                    anchor='w')
                data_label.pack(anchor='w', padx=15, pady=2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if diagnostic_data['missing_data']:
            missing_frame = tk.LabelFrame(self.results_frame, 
                                        text="–ù–ï–û–ë–•–û–î–ò–ú–û –î–û–ë–ê–í–ò–¢–¨",
                                        font=('Arial', 14, 'bold'),
                                        fg='red')
            missing_frame.pack(fill='x', padx=20, pady=10)
            
            for data_type in diagnostic_data['missing_data']:
                data_label = tk.Label(missing_frame, 
                                    text=f"‚ùå {data_type}",
                                    font=('Arial', 12),
                                    fg='red',
                                    anchor='w')
                data_label.pack(anchor='w', padx=15, pady=2)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        recommendation_frame = tk.LabelFrame(self.results_frame, 
                                           text="–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø",
                                           font=('Arial', 14, 'bold'),
                                           fg='blue')
        recommendation_frame.pack(fill='x', padx=20, pady=15)
        
        rec_text = ("–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å "
                   "—Ö–æ—Ç—è –±—ã 2-3 —Ä–∞–∑–¥–µ–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                   "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ä—Ç—É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        
        rec_label = tk.Label(recommendation_frame, 
                           text=rec_text,
                           font=('Arial', 12),
                           wraplength=600,
                           justify='left')
        rec_label.pack(padx=15, pady=10)
    
    def display_predictions(self, predictions, diagnostic_data=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        title_label = tk.Label(self.results_frame, 
                              text="–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–ò",
                              font=('Arial', 18, 'bold'),
                              fg='darkblue')
        title_label.pack(pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if diagnostic_data and diagnostic_data['available_data']:
            data_info_frame = tk.LabelFrame(self.results_frame, 
                                          text="–ü–†–û–ì–ù–û–ó –û–°–ù–û–í–ê–ù –ù–ê –°–õ–ï–î–£–Æ–©–ò–• –î–ê–ù–ù–´–•",
                                          font=('Arial', 12, 'bold'),
                                          fg='darkgreen')
            data_info_frame.pack(fill='x', pady=10)
            
            data_text = "‚úÖ " + " | ‚úÖ ".join(diagnostic_data['available_data'])
            data_label = tk.Label(data_info_frame, 
                                text=data_text,
                                font=('Arial', 11),
                                fg='darkgreen')
            data_label.pack(pady=5)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-3 —Ä–∏—Å–∫–æ–≤
        top_risks = self.predictor.get_top_risks(predictions, 3)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
        main_risks_frame = tk.LabelFrame(self.results_frame, 
                                        text="–û–°–ù–û–í–ù–´–ï –†–ò–°–ö–ò –†–ê–ó–í–ò–¢–ò–Ø –ó–ê–ë–û–õ–ï–í–ê–ù–ò–ô",
                                        font=('Arial', 16, 'bold'),
                                        fg='red')
        main_risks_frame.pack(fill='x', pady=10)
        
        for i, (risk_key, risk_data) in enumerate(top_risks, 1):
            risk_frame = tk.Frame(main_risks_frame)
            risk_frame.pack(fill='x', padx=10, pady=5)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            disease_label = tk.Label(risk_frame, 
                                   text=f"{i}. {risk_data['disease']}",
                                   font=('Arial', 14, 'bold'))
            disease_label.pack(anchor='w')
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
            percentage_label = tk.Label(risk_frame, 
                                      text=f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è: {risk_data['risk_percentage']}%",
                                      font=('Arial', 14),
                                      fg=self.get_risk_color(risk_data['risk_percentage']))
            percentage_label.pack(anchor='w', padx=20)
            
            # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            level_label = tk.Label(risk_frame, 
                                 text=f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_data['risk_level']}",
                                 font=('Arial', 14),
                                 fg=self.get_risk_color(risk_data['risk_percentage']))
            level_label.pack(anchor='w', padx=20)
        
        # –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤
        all_risks_frame = tk.LabelFrame(self.results_frame,
                                       text="–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í",
                                       font=('Arial', 14, 'bold'))
        all_risks_frame.pack(fill='both', expand=True, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        canvas = tk.Canvas(all_risks_frame)
        scrollbar = ttk.Scrollbar(all_risks_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers_frame = tk.Frame(scrollable_frame)
        headers_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(headers_frame, text="–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ", font=('Arial', 12, 'bold'), width=25).pack(side='left')
        tk.Label(headers_frame, text="–†–∏—Å–∫ (%)", font=('Arial', 12, 'bold'), width=10).pack(side='left')
        tk.Label(headers_frame, text="–£—Ä–æ–≤–µ–Ω—å", font=('Arial', 12, 'bold'), width=12).pack(side='left')
        tk.Label(headers_frame, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", font=('Arial', 12, 'bold')).pack(side='left')
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for risk_key, risk_data in predictions.items():
            row_frame = tk.Frame(scrollable_frame, relief='groove', bd=1)
            row_frame.pack(fill='x', padx=5, pady=2)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            disease_label = tk.Label(row_frame, text=risk_data['disease'], 
                                   font=('Arial', 11), width=25, anchor='w')
            disease_label.pack(side='left')
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
            percentage_label = tk.Label(row_frame, text=f"{risk_data['risk_percentage']}%", 
                                      font=('Arial', 11, 'bold'), width=10,
                                      fg=self.get_risk_color(risk_data['risk_percentage']))
            percentage_label.pack(side='left')
            
            # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            level_label = tk.Label(row_frame, text=risk_data['risk_level'], 
                                 font=('Arial', 11), width=12,
                                 fg=self.get_risk_color(risk_data['risk_percentage']))
            level_label.pack(side='left')
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations_text = "; ".join(risk_data['recommendations'][:2])
            if len(risk_data['recommendations']) > 2:
                recommendations_text += "..."
            
            recommendations_label = tk.Label(row_frame, text=recommendations_text, 
                                           font=('Arial', 10), anchor='w', wraplength=300)
            recommendations_label.pack(side='left', fill='x', expand=True)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(self.results_frame)
        actions_frame.pack(fill='x', pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        details_button = tk.Button(actions_frame, text="–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
                                  font=('Arial', 14),
                                  command=lambda: self.show_detailed_recommendations(predictions))
        details_button.pack(side='left', padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        save_button = tk.Button(actions_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
                               font=('Arial', 14),
                               command=lambda: self.save_prediction_report(predictions))
        save_button.pack(side='left', padx=10)
    
    def get_risk_color(self, percentage):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        if percentage < 30:
            return 'green'
        elif percentage < 50:
            return 'orange'
        elif percentage < 70:
            return 'darkorange'
        else:
            return 'red'
    
    def show_detailed_recommendations(self, predictions):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations_window = tk.Toplevel(self.root)
        recommendations_window.title("–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ")
        recommendations_window.geometry("900x700")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        canvas = tk.Canvas(recommendations_window)
        scrollbar = ttk.Scrollbar(recommendations_window, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(scrollable_frame, 
                              text="–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –ü–†–û–§–ò–õ–ê–ö–¢–ò–ß–ï–°–ö–ò–• –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô",
                              font=('Arial', 18, 'bold'),
                              fg='darkblue')
        title_label.pack(pady=15)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–µ
        info_label = tk.Label(scrollable_frame, 
                             text="–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏",
                             font=('Arial', 14),
                             fg='darkgreen')
        info_label.pack(pady=5)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∏—Å–∫–∏ –≤—ã—à–µ 25%
        for risk_key, risk_data in predictions.items():
            if risk_data['risk_percentage'] > 25:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Ä–∏—Å–∫–∏
                disease_frame = tk.LabelFrame(scrollable_frame, 
                                            text=f"{risk_data['disease']} (—Ä–∏—Å–∫: {risk_data['risk_percentage']}% - {risk_data['risk_level']})",
                                            font=('Arial', 16, 'bold'),
                                            fg=self.get_risk_color(risk_data['risk_percentage']))
                disease_frame.pack(fill='x', padx=15, pady=15)
                
                for i, recommendation in enumerate(risk_data['recommendations'], 1):
                    rec_label = tk.Label(disease_frame, 
                                       text=f"‚úì {recommendation}",
                                       font=('Arial', 14),
                                       anchor='w',
                                       wraplength=800)
                    rec_label.pack(anchor='w', padx=15, pady=5)
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        general_frame = tk.LabelFrame(scrollable_frame, 
                                    text="–û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–û–î–î–ï–†–ñ–ê–ù–ò–Ø –ó–î–û–†–û–í–¨–Ø",
                                    font=('Arial', 16, 'bold'),
                                    fg='darkblue')
        general_frame.pack(fill='x', padx=15, pady=15)
        
        general_recommendations = [
            "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3-6 –º–µ—Å—è—Ü–µ–≤",
            "–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
            "–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 150 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é",
            "–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è",
            "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ—Å–ª–µ COVID-19",
            "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º",
            "–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞ (7-8 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏)"
        ]
        
        for i, recommendation in enumerate(general_recommendations, 1):
            rec_label = tk.Label(general_frame, 
                               text=f"‚Ä¢ {recommendation}",
                               font=('Arial', 14),
                               anchor='w',
                               wraplength=800)
            rec_label.pack(anchor='w', padx=15, pady=5)
        
        # –í–∞–∂–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        note_frame = tk.LabelFrame(scrollable_frame, 
                                  text="–í–ê–ñ–ù–û –ü–û–ú–ù–ò–¢–¨",
                                  font=('Arial', 16, 'bold'),
                                  fg='red')
        note_frame.pack(fill='x', padx=15, pady=15)
        
        note_text = ("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç "
                    "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ "
                    "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        
        note_label = tk.Label(note_frame, 
                             text=note_text,
                             font=('Arial', 14, 'bold'),
                             anchor='w',
                             wraplength=800,
                             fg='red')
        note_label.pack(anchor='w', padx=15, pady=10)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = tk.Button(recommendations_window, text="–ó–∞–∫—Ä—ã—Ç—å", 
                                font=('Arial', 16),
                                command=recommendations_window.destroy)
        close_button.pack(pady=15)
    
    def save_prediction_report(self, predictions):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from tkinter import filedialog
            from datetime import datetime
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("–û–¢–ß–ï–¢ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–ò –ü–û–°–õ–ï COVID-19\n")
                    f.write("=" * 60 + "\n\n")
                    f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")
                    
                    # –¢–æ–ø-3 —Ä–∏—Å–∫–∞
                    top_risks = self.predictor.get_top_risks(predictions, 3)
                    f.write("–û–°–ù–û–í–ù–´–ï –†–ò–°–ö–ò:\n")
                    f.write("-" * 20 + "\n")
                    
                    for i, (risk_key, risk_data) in enumerate(top_risks, 1):
                        f.write(f"{i}. {risk_data['disease']}\n")
                        f.write(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {risk_data['risk_percentage']}%\n")
                        f.write(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_data['risk_level']}\n\n")
                    
                    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    f.write("–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í:\n")
                    f.write("-" * 25 + "\n")
                    
                    for risk_key, risk_data in predictions.items():
                        f.write(f"\n{risk_data['disease']}:\n")
                        f.write(f"  –†–∏—Å–∫: {risk_data['risk_percentage']}% ({risk_data['risk_level']})\n")
                        f.write("  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
                        for rec in risk_data['recommendations']:
                            f.write(f"    ‚Ä¢ {rec}\n")
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{filename}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}") 