import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import sqlite3
from datetime import datetime
import random
from medical_functions import MedicalDataManager

class PatientCard:
    def __init__(self, parent_app):
        self.parent_app = parent_app
        self.root = parent_app.root
        self.medical_manager = MedicalDataManager(self)
        
    def show_patient_card(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        # –û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill='both', expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(main_frame)
        header_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Label(header_frame, text="–ö–∞—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞", 
                font=('Arial', 20, 'bold')).pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(header_frame)
        btn_frame.pack(side='right')
        
        tk.Button(btn_frame, text="–ü–µ—á–∞—Ç—å", font=('Arial', 14),
                 command=self.parent_app.print_module.print_patient_data).pack(side='left', padx=5)
        tk.Button(btn_frame, text="–í—ã—Ö–æ–¥", font=('Arial', 14),
                 command=self.parent_app.create_main_window).pack(side='left', padx=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.create_file_tab(notebook)
        self.create_anamnesis_tab(notebook)
        self.create_comorbidities_tab(notebook)
        self.create_blood_test_tab(notebook)
        self.create_urine_test_tab(notebook)
        self.create_ecg_tab(notebook)
        self.create_echo_tab(notebook)
    
    def create_file_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        file_frame = ttk.Frame(notebook)
        notebook.add(file_frame, text="–§–∞–π–ª")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        left_frame = tk.Frame(file_frame, width=400)
        left_frame.pack(side='left', fill='y', padx=10, pady=10)
        left_frame.pack_propagate(False)
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        self.patient_fields = {}
        
        fields = [
            ("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:", "card_number"),
            ("–ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞:", "policy_number"),
            ("–§–∞–º–∏–ª–∏—è:", "surname"),
            ("–ò–º—è:", "name"),
            ("–û—Ç—á–µ—Å—Ç–≤–æ:", "patronymic"),
            ("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:", "birth_date"),
            ("–ê–¥—Ä–µ—Å:", "address"),
            ("–¢–µ–ª–µ—Ñ–æ–Ω:", "phone"),
            ("–ü–∞—Å–ø–æ—Ä—Ç:", "passport"),
            ("–°–µ—Ä–∏—è:", "series"),
            ("‚Ññ:", "number"),
            ("–í—ã–¥–∞–Ω:", "issued_by"),
            ("–°–ù–ò–õ–°:", "snils"),
            ("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:", "workplace")
        ]
        
        row = 0
        for label_text, field_name in fields:
            tk.Label(left_frame, text=label_text, font=('Arial', 14)).grid(
                row=row, column=0, sticky='w', pady=2)
            
            entry = tk.Entry(left_frame, font=('Arial', 14), width=28)
            entry.grid(row=row, column=1, sticky='w', padx=(10, 0), pady=2)
            self.patient_fields[field_name] = entry
            row += 1
        
        # –ü–æ–ª
        tk.Label(left_frame, text="–ü–æ–ª:", font=('Arial', 14)).grid(
            row=row, column=0, sticky='w', pady=2)
        gender_combo = ttk.Combobox(left_frame, values=["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"], width=25)
        gender_combo.grid(row=row, column=1, sticky='w', padx=(10, 0), pady=2)
        self.patient_fields["gender"] = gender_combo
        row += 1
        
        # –ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        tk.Label(left_frame, text="–ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏:", font=('Arial', 14)).grid(
            row=row, column=0, sticky='w', pady=2)
        disability_combo = ttk.Combobox(left_frame, values=["", "–ø–µ—Ä–≤–∞—è (–ê)", "–≤—Ç–æ—Ä–∞—è (–ê)", "—Ç—Ä–µ—Ç—å—è"], width=25)
        disability_combo.grid(row=row, column=1, sticky='w', padx=(10, 0), pady=2)
        self.patient_fields["disability_group"] = disability_combo
        row += 1
        
        # –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏
        tk.Label(left_frame, text="–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏:", font=('Arial', 14)).grid(
            row=row, column=0, sticky='w', pady=2)
        blood_combo = ttk.Combobox(left_frame, values=["–ø–µ—Ä–≤–∞—è (–ê)", "–≤—Ç–æ—Ä–∞—è (–ê)", "—Ç—Ä–µ—Ç—å—è", "—á–µ—Ç–≤–µ—Ä—Ç–∞—è"], width=25)
        blood_combo.grid(row=row, column=1, sticky='w', padx=(10, 0), pady=2)
        self.patient_fields["blood_group"] = blood_combo
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        buttons_frame = tk.Frame(left_frame)
        buttons_frame.grid(row=row+2, column=0, columnspan=2, pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", font=('Arial', 14),
                 command=self.save_patient_data).pack(side='left', padx=5)
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", font=('Arial', 14),
                 command=self.load_patient_data).pack(side='left', padx=5)
        tk.Button(buttons_frame, text="–ù–æ–≤—ã–π", font=('Arial', 14),
                 command=self.clear_patient_data).pack(side='left', padx=5)
        tk.Button(buttons_frame, text="–ü–µ—á–∞—Ç—å", font=('Arial', 14),
                 command=self.parent_app.print_module.print_patient_data).pack(side='left', padx=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        right_frame = tk.Frame(file_frame)
        right_frame.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–±–∏—Ä–∫–∏
        image_frame = tk.Frame(right_frame, bg='lightblue', width=300, height=200)
        image_frame.pack(pady=20)
        image_frame.pack_propagate(False)
        
        tk.Label(image_frame, text="üß™", font=('Arial', 48), bg='lightblue').pack(expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        tk.Button(right_frame, text="–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏", 
                 font=('Arial', 16), bg='lightgreen',
                 command=self.show_disease_prediction).pack(pady=20)
    
    def create_anamnesis_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–º–Ω–µ–∑–∞"""
        anamnesis_frame = ttk.Frame(notebook)
        notebook.add(anamnesis_frame, text="–ê–Ω–∞–º–Ω–µ–∑")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Ä–∞—á–∞
        left_frame = tk.Frame(anamnesis_frame, width=300)
        left_frame.pack(side='left', fill='y', padx=10, pady=10)
        left_frame.pack_propagate(False)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–∞—á–∞
        image_frame = tk.Frame(left_frame, bg='lightcyan', height=250)
        image_frame.pack(fill='x', pady=10)
        image_frame.pack_propagate(False)
        tk.Label(image_frame, text="üë®‚Äç‚öïÔ∏è", font=('Arial', 48), bg='lightcyan').pack(expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏
        right_frame = tk.Frame(anamnesis_frame)
        right_frame.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤
        symptoms_frame = tk.Frame(right_frame)
        symptoms_frame.pack(fill='both', expand=True)
        
        left_symptoms = tk.Frame(symptoms_frame)
        left_symptoms.pack(side='left', fill='both', expand=True, padx=(0, 20))
        
        right_symptoms = tk.Frame(symptoms_frame)
        right_symptoms.pack(side='right', fill='both', expand=True)
        
        self.anamnesis_vars = {}
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
        left_symptom_list = [
            ("–°–ª–∞–±–æ—Å—Ç—å", "weakness"),
            ("–£—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å", "fatigue"),
            ("(–∫–≥) –ü–æ—Ç–µ—Ä—è –≤–µ—Å–∞", "weight_loss"),
            ("–ë–ª–µ–¥–Ω–æ—Å—Ç—å", "pallor"),
            ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "temperature"),
            ("–ù–∞—Å–º–æ—Ä–∫", "runny_nose"),
            ("–ü–æ—Ç–ª–∏–≤–æ—Å—Ç—å", "sweating"),
            ("–ö–∞—à–µ–ª—å", "cough"),
            ("–ù–∞–ª–∏—á–∏–µ –º–æ–∫—Ä–æ—Ç—ã", "sputum"),
            ("–ì–Ω–æ–π–Ω–∞—è –º–æ–∫—Ä–æ—Ç–∞", "purulent_sputum"),
            ("–ö—Ä–æ–≤—è–Ω–∞—è –º–æ–∫—Ä–æ—Ç–∞", "bloody_sputum"),
            ("–°–ª–∏–∑–∏—Å—Ç–∞—è –º–æ–∫—Ä–æ—Ç–∞", "mucous_sputum"),
            ("–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–π COVID-19", "covid19")
        ]
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤  
        right_symptom_list = [
            ("–ö—Ä–æ–≤–æ—Ö–∞—Ä–∫–∞–Ω–∏–µ", "hemoptysis"),
            ("–†–≤–æ—Ç–∞", "vomiting"),
            ("–ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏", "headache"),
            ("–ó–∞–ø–æ—Ä", "constipation"),
            ("–î–∏–∞—Ä–µ—è", "diarrhea"),
            ("–ë–æ–ª–∏ –≤ –≥—Ä—É–¥–∏", "chest_pain"),
            ("–ö—Ä–æ–≤—å –≤ –∫–∞–ª–æ–≤—ã—Ö –º–∞—Å—Å–∞—Ö", "blood_in_stool"),
            ("–û–¥—ã—à–∫–∞", "dyspnea"),
            ("–ü–æ—Ç–µ—Ä—è –æ–±–æ–Ω—è–Ω–∏—è –∏ –≤–∫—É—Å–∞", "loss_smell_taste"),
            ("–ú–∏–∞–ª–≥–∏—è", "myalgia"),
            ("–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ", "palpitations"),
            ("–ê–î –≤ –Ω–æ—Ä–º–µ(–º–º.—Ä—Ç.—Å—Ç.)", "normal_bp"),
            ("–ê–î –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ(–º–º.—Ä—Ç.—Å—Ç.)", "high_bp")
        ]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        for symptom_text, var_name in left_symptom_list:
            var = tk.BooleanVar()
            self.anamnesis_vars[var_name] = var
            cb = tk.Checkbutton(left_symptoms, text=symptom_text, variable=var, 
                               font=('Arial', 14))
            cb.pack(anchor='w', pady=2)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        for symptom_text, var_name in right_symptom_list:
            var = tk.BooleanVar()
            self.anamnesis_vars[var_name] = var
            cb = tk.Checkbutton(right_symptoms, text=symptom_text, variable=var,
                               font=('Arial', 14))
            cb.pack(anchor='w', pady=2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–Ω–∏–∑—É
        bottom_frame = tk.Frame(anamnesis_frame)
        bottom_frame.pack(side='bottom', fill='x', padx=10, pady=10)
        
        # –ü–æ–ª—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        special_frame = tk.Frame(bottom_frame)
        special_frame.pack(fill='x')
        
        # COVID-19 —Ç—è–∂–µ—Å—Ç—å
        covid_frame = tk.Frame(special_frame)
        covid_frame.pack(anchor='w', pady=5)
        
        tk.Label(covid_frame, text="–¢—è–∂–µ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ COVID-19:", font=('Arial', 14, 'bold')).pack(anchor='w')
        
        self.covid_severity_var = tk.StringVar()
        covid_options = ["–ù–µ –±–æ–ª–µ–ª", "–õ–µ–≥–∫–∞—è —Ñ–æ—Ä–º–∞", "–°—Ä–µ–¥–Ω—è—è —Ñ–æ—Ä–º–∞", "–¢—è–∂–µ–ª–∞—è —Ñ–æ—Ä–º–∞"]
        for option in covid_options:
            rb = tk.Radiobutton(covid_frame, text=option, variable=self.covid_severity_var, value=option,
                               font=('Arial', 12))
            rb.pack(anchor='w', padx=20)
        
        # SpO2 –ø–æ–ª—è
        spo2_frame = tk.Frame(special_frame)
        spo2_frame.pack(anchor='w', pady=5)
        
        self.spo2_vars = {}
        spo2_options = [
            ("SpO2(%) –í –Ω–æ—Ä–º–µ –ø—Ä–∏ –¥—ã—Ö–∞–Ω–∏–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º", "spo2_normal"),
            ("SpO2(%) –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø—Ä–∏ –¥—ã—Ö–∞–Ω–∏–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º", "spo2_low_air"),
            ("SpO2(%) –í –Ω–æ—Ä–º–µ –Ω–∞ –∏–Ω—Å—É—Ñ–ª—è—Ü–∏–∏ —É–≤–ª–∞–∂–Ω–µ–Ω–Ω—ã–º O2 —á–µ—Ä–µ–∑ –Ω–æ—Å—É –•–∞–¥—Å–æ–Ω–∞", "spo2_normal_o2")
        ]
        
        for option_text, var_name in spo2_options:
            var = tk.BooleanVar()
            self.spo2_vars[var_name] = var
            cb = tk.Checkbutton(spo2_frame, text=option_text, variable=var,
                               font=('Arial', 12))
            cb.pack(anchor='w', pady=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–º–Ω–µ–∑–∞
        buttons_frame = tk.Frame(bottom_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–º–Ω–µ–∑", 
                 font=('Arial', 14), bg='lightgreen',
                 command=self.medical_manager.save_anamnesis_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                 font=('Arial', 14), bg='lightyellow',
                 command=self.medical_manager.load_anamnesis_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                 font=('Arial', 14), bg='lightcoral',
                 command=self.clear_anamnesis_data).pack(side='left', padx=5)
    
    def create_comorbidities_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–æ–º–æ—Ä–±–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        comorbidities_frame = ttk.Frame(notebook)
        notebook.add(comorbidities_frame, text="–ö–æ–º–æ—Ä–±–∏–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
        left_frame = tk.Frame(comorbidities_frame)
        left_frame.pack(side='left', fill='both', expand=True, padx=10, pady=10)
        
        self.comorbidity_vars = {}
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–æ—Ä–±–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        comorbidities_list = [
            "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞",
            "–∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∞—Ä—Ç–µ—Ä–∏–π",
            "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∂–µ–ª—É–¥–∫–∞",
            "—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã",
            "—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–¥–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å",
            "–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å",
            "–æ–∂–∏—Ä–µ–Ω–∏–µ",
            "—Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π",
            "—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
            "—Å—Ç–µ–ø–µ–Ω—å –Ω—Ç",
            "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ª–µ–≥–æ—á–Ω–æ–π —Ç–∫–∞–Ω–∏",
            "–¥—Ä—É–≥–∏–µ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
            "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π",
            "–ò–ë–°",
            "–°–î",
            "–ì–ë",
            "–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞",
            "–º—ã—à–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
            "–ø–Ω–µ–≤–º–æ–Ω–∏—è",
            "—Å—Ç–∞–¥–∏—è —Ä–µ–∫–æ–Ω–≤–∞–ª–µ—Å—Ü–µ–Ω—Ü–∏–∏",
            "–¥—Ä—É–≥–∏–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏"
        ]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–º–µ–Ω–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        self.comorbidities_vars = {}
        
        comorbidities_mapping = [
            ("–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞", "spinal_diseases"),
            ("–∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∞—Ä—Ç–µ—Ä–∏–π", "atherosclerosis"),
            ("–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∂–µ–ª—É–¥–∫–∞", "gastric_diseases"),
            ("—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è", "stenosis"),
            ("–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã", "thyroid_diseases"),
            ("—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–¥–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å", "chronic_heart_failure"),
            ("–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å", "respiratory_failure"),
            ("–æ–∂–∏—Ä–µ–Ω–∏–µ", "obesity"),
            ("—Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π", "cardiovascular_diseases"),
            ("—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "joint_diseases"),
            ("—Å—Ç–µ–ø–µ–Ω—å –Ω—Ç", "iht"),
            ("–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ª–µ–≥–æ—á–Ω–æ–π —Ç–∫–∞–Ω–∏", "cerebrovascular_diseases"),
            ("–¥—Ä—É–≥–∏–µ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "brain_diseases"),
            ("–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π", "muscle_diseases"),
            ("–ò–ë–°", "pneumonia"),
            ("–°–î", "pathology_stage"),
            ("–ì–ë", "other_pathologies"),
            ("–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞", "brain_diseases_2"),
            ("–º—ã—à–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "muscle_diseases_2"),
            ("–ø–Ω–µ–≤–º–æ–Ω–∏—è", "pneumonia_2"),
            ("—Å—Ç–∞–¥–∏—è —Ä–µ–∫–æ–Ω–≤–∞–ª–µ—Å—Ü–µ–Ω—Ü–∏–∏", "recovery_stage"),
            ("–¥—Ä—É–≥–∏–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏", "other_pathologies_2")
        ]
        
        for condition_text, var_name in comorbidities_mapping:
            var = tk.BooleanVar()
            self.comorbidities_vars[var_name] = var
            cb = tk.Checkbutton(left_frame, text=condition_text, variable=var,
                               font=('Arial', 14))
            cb.pack(anchor='w', pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–æ—Ä–±–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        buttons_frame = tk.Frame(left_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–æ—Ä–±–∏–¥–Ω–æ—Å—Ç–∏", 
                 font=('Arial', 14), bg='lightgreen',
                 command=self.medical_manager.save_comorbidities_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                 font=('Arial', 14), bg='lightyellow',
                 command=self.medical_manager.load_comorbidities_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                 font=('Arial', 14), bg='lightcoral',
                 command=self.clear_comorbidities_data).pack(side='left', padx=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        right_frame = tk.Frame(comorbidities_frame, width=300)
        right_frame.pack(side='right', fill='y', padx=10, pady=10)
        right_frame.pack_propagate(False)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_frame = tk.Frame(right_frame, bg='lightblue', height=400)
        image_frame.pack(fill='both', expand=True)
        image_frame.pack_propagate(False)
        
        tk.Label(image_frame, text="ü´Å", font=('Arial', 64), bg='lightblue').pack(expand=True)
    
    def create_blood_test_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏"""
        blood_frame = ttk.Frame(notebook)
        notebook.add(blood_frame, text="–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        left_frame = tk.Frame(blood_frame, width=300)
        left_frame.pack(side='left', fill='y', padx=10, pady=10)
        left_frame.pack_propagate(False)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏
        image_frame = tk.Frame(left_frame, bg='lightcoral', height=200)
        image_frame.pack(fill='x', pady=10)
        image_frame.pack_propagate(False)
        tk.Label(image_frame, text="ü©∏", font=('Arial', 48), bg='lightcoral').pack(expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        right_frame = tk.Frame(blood_frame)
        right_frame.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        self.blood_test_vars = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫—Ä–æ–≤–∏
        blood_params = [
            ("(*10^12/–ª) –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–æ–≤", "erythrocytes"),
            ("(*10^9/–ª) –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ª–µ–π–∫–æ—Ü–∏—Ç–æ–≤", "leukocytes"),
            ("(–≥/–ª) –ì–µ–º–æ–≥–ª–æ–±–∏–Ω", "hemoglobin"),
            ("(–º–º/—á) –°–û–≠", "soe"),
            ("% –õ–∏–º—Ñ–æ—Ü–∏—Ç—ã", "lymphocytes")
        ]
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self.blood_entries = {}
        for param_text, var_name in blood_params:
            param_frame = tk.Frame(right_frame)
            param_frame.pack(fill='x', pady=2)
            
            tk.Label(param_frame, text=param_text, font=('Arial', 14), width=30, anchor='w').pack(side='left')
            entry = tk.Entry(param_frame, font=('Arial', 14), width=15)
            entry.pack(side='right', padx=10)
            self.blood_entries[var_name] = entry
        
        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        checkboxes = [
            ("–°–†–ë –≤ –Ω–æ—Ä–º–µ(–º–≥/–ª)", "srb_normal"),
            ("–°–†–ë –ø–æ–≤—ã—à–µ–Ω(–º–≥/–ª)", "srb_elevated"),
            ("D-–¥–∏–º–µ—Ä –≤ –Ω–æ—Ä–º–µ (–Ω–≥/–º–ª)", "d_dimer_normal"),
            ("D-–¥–∏–º–µ—Ä –ø–æ–≤—ã—à–µ–Ω (–Ω–≥/–º–ª)", "d_dimer_elevated"),
            ("–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã –≤ –Ω–æ—Ä–º–µ (*10^9/–ª)", "thrombocytes_normal"),
            ("–ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã (*10^9/–ª)", "thrombocytes_low")
        ]
        
        tk.Label(right_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:", font=('Arial', 14, 'bold')).pack(anchor='w', pady=(10, 5))
        
        for cb_text, var_name in checkboxes:
            var = tk.BooleanVar()
            self.blood_test_vars[var_name] = var
            cb = tk.Checkbutton(right_frame, text=cb_text, variable=var,
                               font=('Arial', 14))
            cb.pack(anchor='w', pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(right_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                 font=('Arial', 14), bg='lightgreen',
                 command=self.medical_manager.save_blood_test_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                 font=('Arial', 14), bg='lightblue',
                 command=self.medical_manager.load_blood_test_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                 font=('Arial', 14), bg='lightcoral',
                 command=self.clear_blood_test_data).pack(side='left', padx=5)
    
    def create_urine_test_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏"""
        urine_frame = ttk.Frame(notebook)
        notebook.add(urine_frame, text="–ê–Ω–∞–ª–∏–∑ –º–æ—á–∏")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        left_frame = tk.Frame(urine_frame, width=400)
        left_frame.pack(side='left', fill='y', padx=10, pady=10)
        left_frame.pack_propagate(False)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏
        image_frame = tk.Frame(left_frame, bg='lightyellow', height=250)
        image_frame.pack(fill='x', pady=10)
        image_frame.pack_propagate(False)
        tk.Label(image_frame, text="üß™", font=('Arial', 48), bg='lightyellow').pack(expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        right_frame = tk.Frame(urine_frame)
        right_frame.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        self.urine_test_vars = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏
        urine_params = [
            ("–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è", "analysis_not_performed"),
            ("–ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –º–æ—á–∞", "transparent_urine"),
            ("–ú—É—Ç–Ω–∞—è –º–æ—á–∞", "cloudy_urine"),
            ("–°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç–∞—è –º–æ—á–∞", "light_yellow_urine"),
            ("–¢–µ–º–Ω–æ-–∂–µ–ª—Ç–∞—è –º–æ—á–∞", "dark_yellow_urine")
        ]
        
        for param_text, var_name in urine_params:
            var = tk.BooleanVar()
            self.urine_test_vars[var_name] = var
            cb = tk.Checkbutton(right_frame, text=param_text, variable=var,
                               font=('Arial', 14))
            cb.pack(anchor='w', pady=3)
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        tk.Label(right_frame, text="(–≥/–ª) –ù–∞–ª–∏—á–∏–µ –±–µ–ª–∫–∞:", font=('Arial', 14)).pack(anchor='w', pady=(10, 2))
        self.protein_entry = tk.Entry(right_frame, font=('Arial', 14), width=20)
        self.protein_entry.pack(anchor='w', padx=20)
        
        tk.Label(right_frame, text="(–≤ –ø/–∑—Ä) –õ–µ–π–∫–æ—Ü–∏—Ç—ã:", font=('Arial', 14)).pack(anchor='w', pady=(10, 2))
        self.leukocytes_urine_entry = tk.Entry(right_frame, font=('Arial', 14), width=20)
        self.leukocytes_urine_entry.pack(anchor='w', padx=20)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(right_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                 font=('Arial', 14), bg='lightgreen',
                 command=self.medical_manager.save_urine_test_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                 font=('Arial', 14), bg='lightblue',
                 command=self.medical_manager.load_urine_test_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                 font=('Arial', 14), bg='lightcoral',
                 command=self.clear_urine_test_data).pack(side='left', padx=5)
    
    def create_ecg_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≠–ö–ì"""
        ecg_frame = ttk.Frame(notebook)
        notebook.add(ecg_frame, text="–≠–ö–ì")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left_frame = tk.Frame(ecg_frame)
        left_frame.pack(side='left', fill='both', expand=True, padx=10, pady=10)
        
        self.ecg_vars = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≠–ö–ì
        ecg_params = [
            ("G1 –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g1_deviation"),
            ("G2 (–ª–∂) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g2_lzh_deviation"),
            ("G3 –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g3_deviation"),
            ("G3 (–ª–∂) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g3_lzh_deviation"),
            ("G6 (–ª–∂) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g6_lzh_deviation"),
            ("G7 –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g7_deviation"),
            ("G9 –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "g9_deviation"),
            ("–ü—É–ª—å—Å", "pulse"),
            ("–î–µ–ª–∏—Ç QRS –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "qrs_deviation"),
            ("–î–ª–∏—Ç Q-T –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "qt_deviation"),
            ("–î–ª–∏—Ç PQ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "pq_deviation"),
            ("–î–ª–∏—Ç P –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "p_deviation"),
            ("–ê–º–ø T –≤ –Ω–æ—Ä–º–µ", "t_normal"),
            ("–í–°–† –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "bcp_deviation")
        ]
        
        for param_text, var_name in ecg_params:
            var = tk.BooleanVar()
            self.ecg_vars[var_name] = var
            cb = tk.Checkbutton(left_frame, text=param_text, variable=var,
                               font=('Arial', 14))
            cb.pack(anchor='w', pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(left_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≠–ö–ì", 
                 font=('Arial', 14), bg='lightgreen',
                 command=self.medical_manager.save_ecg_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                 font=('Arial', 14), bg='lightblue',
                 command=self.medical_manager.load_ecg_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                 font=('Arial', 14), bg='lightcoral',
                 command=self.clear_ecg_data).pack(side='left', padx=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≠–ö–ì
        right_frame = tk.Frame(ecg_frame, width=400)
        right_frame.pack(side='right', fill='y', padx=10, pady=10)
        right_frame.pack_propagate(False)
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≠–ö–ì
        image_frame = tk.Frame(right_frame, bg='lightgreen', height=300)
        image_frame.pack(fill='both', expand=True)
        image_frame.pack_propagate(False)
        tk.Label(image_frame, text="üìà", font=('Arial', 64), bg='lightgreen').pack(expand=True)
    
    def create_echo_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≠–•–û-–ö–ì"""
        echo_frame = ttk.Frame(notebook)
        notebook.add(echo_frame, text="–≠–•–û-–ö–ì")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        main_frame = tk.Frame(echo_frame)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≠–•–û-–ö–ì", font=('Arial', 14, 'bold')).pack(pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≠–•–û-–ö–ì
        self.echo_fields = {}
        
        echo_params = [
            ("–ö–æ–Ω–µ—á–Ω–æ-–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –õ–ñ (–º–º)", "lv_edd"),
            ("–ö–æ–Ω–µ—á–Ω–æ-—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –õ–ñ (–º–º)", "lv_esd"),
            ("–¢–æ–ª—â–∏–Ω–∞ –∑–∞–¥–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –õ–ñ (–º–º)", "lv_pw_thickness"),
            ("–¢–æ–ª—â–∏–Ω–∞ –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏ (–º–º)", "ivs_thickness"),
            ("–§—Ä–∞–∫—Ü–∏—è –≤—ã–±—Ä–æ—Å–∞ –õ–ñ (%)", "lv_ef"),
            ("–î–∏–∞–º–µ—Ç—Ä –ª–µ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–µ—Ä–¥–∏—è (–º–º)", "la_diameter"),
            ("–î–∏–∞–º–µ—Ç—Ä –ø—Ä–∞–≤–æ–≥–æ –∂–µ–ª—É–¥–æ—á–∫–∞ (–º–º)", "rv_diameter"),
            ("–î–∏–∞–º–µ—Ç—Ä –∞–æ—Ä—Ç—ã (–º–º)", "aorta_diameter"),
            ("–õ–ê —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–º–º —Ä—Ç.—Å—Ç.)", "pa_systolic_pressure")
        ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        for i, (param_text, field_name) in enumerate(echo_params):
            row_frame = tk.Frame(main_frame)
            row_frame.pack(fill='x', pady=3)
            
            tk.Label(row_frame, text=param_text, font=('Arial', 14), width=40, anchor='w').pack(side='left')
            
            entry = tk.Entry(row_frame, font=('Arial', 14), width=15)
            entry.pack(side='right', padx=10)
            self.echo_fields[field_name] = entry
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(main_frame)
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≠–•–û-–ö–ì", 
                 font=('Arial', 14), bg='lightgreen',
                 command=self.medical_manager.save_echo_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                 font=('Arial', 14), bg='lightblue',
                 command=self.medical_manager.load_echo_data).pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                 font=('Arial', 14), bg='lightcoral',
                 command=self.clear_echo_data).pack(side='left', padx=5)
    
    def save_patient_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ë–î"""
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not self.patient_fields.get("surname").get().strip():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–º–∏–ª–∏—è —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º!")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            patient_data = {}
            for field_name, field_widget in self.patient_fields.items():
                if hasattr(field_widget, 'get'):
                    patient_data[field_name] = field_widget.get()
                else:
                    patient_data[field_name] = ""
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
            patient_data['created_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            insert_query = """
                INSERT INTO patients (
                    card_number, policy_number, surname, name, patronymic,
                    birth_date, gender, address, phone, passport,
                    series, number, issued_by, snils, workplace,
                    disability_group, blood_group, created_date
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            cursor.execute(insert_query, (
                patient_data.get('card_number', ''),
                patient_data.get('policy_number', ''),
                patient_data.get('surname', ''),
                patient_data.get('name', ''),
                patient_data.get('patronymic', ''),
                patient_data.get('birth_date', ''),
                patient_data.get('gender', ''),
                patient_data.get('address', ''),
                patient_data.get('phone', ''),
                patient_data.get('passport', ''),
                patient_data.get('series', ''),
                patient_data.get('number', ''),
                patient_data.get('issued_by', ''),
                patient_data.get('snils', ''),
                patient_data.get('workplace', ''),
                patient_data.get('disability_group', ''),
                patient_data.get('blood_group', ''),
                patient_data.get('created_date', '')
            ))
            self.parent_app.current_patient_id = cursor.lastrowid
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ID: {self.parent_app.current_patient_id}")
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    
    def load_patient_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
        # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≤ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient_id = simpledialog.askstring("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
        if not patient_id:
            return
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM patients WHERE id=?", (patient_id,))
            patient_data = cursor.fetchone()
            
            if patient_data:
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
                fields_mapping = [
                    'id', 'card_number', 'policy_number', 'surname', 'name', 'patronymic',
                    'birth_date', 'gender', 'address', 'phone', 'passport',
                    'series', 'number', 'issued_by', 'snils', 'workplace',
                    'disability_group', 'blood_group', 'created_date'
                ]
                
                for i, field_name in enumerate(fields_mapping[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID
                    if field_name in self.patient_fields and i < len(patient_data):
                        field_widget = self.patient_fields[field_name]
                        if hasattr(field_widget, 'delete') and hasattr(field_widget, 'insert'):
                            field_widget.delete(0, tk.END)
                            field_widget.insert(0, patient_data[i] or "")
                        elif hasattr(field_widget, 'set'):
                            field_widget.set(patient_data[i] or "")
                
                self.parent_app.current_patient_id = patient_data[0]
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            conn.close()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
    
    def clear_patient_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        for field_widget in self.patient_fields.values():
            if hasattr(field_widget, 'delete'):
                field_widget.delete(0, tk.END)
            elif hasattr(field_widget, 'set'):
                field_widget.set("")
        
        self.parent_app.current_patient_id = None
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    
    def show_disease_prediction(self):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
        if not self.parent_app.current_patient_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
            return
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        prediction_window = tk.Toplevel(self.root)
        prediction_window.title("–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏")
        prediction_window.geometry("500x400")
        
        tk.Label(prediction_window, text="–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏", 
                font=('Arial', 16, 'bold')).pack(pady=10)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏)
        diseases = [
            ("–ü–æ—Å—Ç–∫–æ–≤–∏–¥–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º", random.randint(65, 85)),
            ("–õ–µ–≥–æ—á–Ω—ã–π —Ñ–∏–±—Ä–æ–∑", random.randint(25, 45)),
            ("–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è", random.randint(30, 50)),
            ("–ù–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", random.randint(20, 40)),
            ("–≠–Ω–¥–æ–∫—Ä–∏–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", random.randint(15, 35))
        ]
        
        results_frame = tk.Frame(prediction_window)
        results_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        tk.Label(results_frame, text="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π:", 
                font=('Arial', 12, 'bold')).pack(pady=5)
        
        for disease, probability in diseases:
            result_frame = tk.Frame(results_frame)
            result_frame.pack(fill='x', pady=3)
            
            tk.Label(result_frame, text=f"{disease}:", 
                    font=('Arial', 10), width=30, anchor='w').pack(side='left')
            tk.Label(result_frame, text=f"{probability}%", 
                    font=('Arial', 10, 'bold'), fg='red' if probability > 50 else 'orange').pack(side='right')
        
        tk.Button(prediction_window, text="–ó–∞–∫—Ä—ã—Ç—å", 
                 command=prediction_window.destroy).pack(pady=20)
    
    def clear_blood_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏"""
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        if hasattr(self, 'blood_entries'):
            for entry in self.blood_entries.values():
                entry.delete(0, tk.END)
        
        # –û—á–∏—â–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
        if hasattr(self, 'blood_test_vars'):
            for var in self.blood_test_vars.values():
                var.set(False)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def clear_urine_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏"""
        # –û—á–∏—â–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
        if hasattr(self, 'urine_test_vars'):
            for var in self.urine_test_vars.values():
                var.set(False)
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        if hasattr(self, 'protein_entry'):
            self.protein_entry.delete(0, tk.END)
        if hasattr(self, 'leukocytes_urine_entry'):
            self.leukocytes_urine_entry.delete(0, tk.END)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def clear_ecg_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≠–ö–ì"""
        if hasattr(self, 'ecg_vars'):
            for var in self.ecg_vars.values():
                var.set(False)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –≠–ö–ì –æ—á–∏—â–µ–Ω—ã")
    
    def clear_echo_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≠–•–û-–ö–ì"""
        if hasattr(self, 'echo_fields'):
            for entry in self.echo_fields.values():
                entry.delete(0, tk.END)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –≠–•–û-–ö–ì –æ—á–∏—â–µ–Ω—ã")
    
    def clear_anamnesis_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–º–Ω–µ–∑–∞"""
        if hasattr(self, 'anamnesis_vars'):
            for var in self.anamnesis_vars.values():
                var.set(False)
        
        if hasattr(self, 'spo2_vars'):
            for var in self.spo2_vars.values():
                var.set(False)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–º–Ω–µ–∑–∞ –æ—á–∏—â–µ–Ω—ã")
    
    def clear_comorbidities_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–æ—Ä–±–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        if hasattr(self, 'comorbidities_vars'):
            for var in self.comorbidities_vars.values():
                var.set(False)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –∫–æ–º–æ—Ä–±–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—á–∏—â–µ–Ω—ã")
    
    def save_blood_test_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏"""
        if not self.parent_app.current_patient_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
            return
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            cursor.execute("DELETE FROM blood_tests WHERE patient_id=?", (self.parent_app.current_patient_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            blood_data = {}
            for field_name, entry in self.blood_entries.items():
                try:
                    value = float(entry.get()) if entry.get().strip() else None
                    blood_data[field_name] = value
                except ValueError:
                    blood_data[field_name] = None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
            checkbox_data = {}
            for var_name, var in self.blood_test_vars.items():
                checkbox_data[var_name] = 1 if var.get() else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute("""
                INSERT INTO blood_tests (
                    patient_id, erythrocytes, leukocytes, hemoglobin, soe, lymphocytes,
                    srb_normal, srb_elevated, d_dimer_normal, d_dimer_elevated,
                    thrombocytes_normal, thrombocytes_low
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                self.parent_app.current_patient_id,
                blood_data.get('erythrocytes'),
                blood_data.get('leukocytes'), 
                blood_data.get('hemoglobin'),
                blood_data.get('soe'),
                blood_data.get('lymphocytes'),
                checkbox_data.get('srb_normal', 0),
                checkbox_data.get('srb_elevated', 0),
                checkbox_data.get('d_dimer_normal', 0),
                checkbox_data.get('d_dimer_elevated', 0),
                checkbox_data.get('thrombocytes_normal', 0),
                checkbox_data.get('thrombocytes_low', 0)
            ))
            
            conn.commit()
            conn.close()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏: {str(e)}")
    
    def load_blood_test_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏"""
        if not self.parent_app.current_patient_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
            return
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM blood_tests WHERE patient_id=?", (self.parent_app.current_patient_id,))
            blood_data = cursor.fetchone()
            
            if blood_data:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
                fields = ['erythrocytes', 'leukocytes', 'hemoglobin', 'soe', 'lymphocytes']
                for i, field_name in enumerate(fields):
                    if field_name in self.blood_entries and blood_data[i+2] is not None:
                        self.blood_entries[field_name].delete(0, tk.END)
                        self.blood_entries[field_name].insert(0, str(blood_data[i+2]))
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã
                checkbox_fields = ['srb_normal', 'srb_elevated', 'd_dimer_normal', 'd_dimer_elevated', 'thrombocytes_normal', 'thrombocytes_low']
                for i, field_name in enumerate(checkbox_fields):
                    if field_name in self.blood_test_vars:
                        self.blood_test_vars[field_name].set(bool(blood_data[i+7]))
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            conn.close()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏: {str(e)}")
    
    def clear_blood_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏"""
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        for entry in self.blood_entries.values():
            entry.delete(0, tk.END)
        
        # –û—á–∏—â–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
        for var in self.blood_test_vars.values():
            var.set(False)
        
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_urine_test_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏"""
        if not self.parent_app.current_patient_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
            return
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            cursor.execute("DELETE FROM urine_tests WHERE patient_id=?", (self.parent_app.current_patient_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
            checkbox_data = {}
            for var_name, var in self.urine_test_vars.items():
                checkbox_data[var_name] = 1 if var.get() else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            protein_value = None
            leukocytes_value = None
            
            try:
                if hasattr(self, 'protein_entry') and self.protein_entry.get().strip():
                    protein_value = float(self.protein_entry.get())
                if hasattr(self, 'leukocytes_urine_entry') and self.leukocytes_urine_entry.get().strip():
                    leukocytes_value = float(self.leukocytes_urine_entry.get())
            except ValueError:
                pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute("""
                INSERT INTO urine_tests (
                    patient_id, analysis_not_performed, transparent_urine, cloudy_urine,
                    light_yellow_urine, dark_yellow_urine, protein_presence, leukocytes_presence
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                self.parent_app.current_patient_id,
                checkbox_data.get('analysis_not_performed', 0),
                checkbox_data.get('transparent_urine', 0),
                checkbox_data.get('cloudy_urine', 0),
                checkbox_data.get('light_yellow_urine', 0),
                checkbox_data.get('dark_yellow_urine', 0),
                protein_value,
                leukocytes_value
            ))
            
            conn.commit()
            conn.close()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∞–ª–∏–∑ –º–æ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏: {str(e)}")
    
    def save_ecg_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≠–ö–ì"""
        if not self.parent_app.current_patient_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
            return
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            cursor.execute("DELETE FROM ecg_data WHERE patient_id=?", (self.parent_app.current_patient_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
            ecg_values = []
            ecg_fields = ['g1_deviation', 'g2_lzh_deviation', 'g3_deviation', 'g3_lzh_deviation',
                         'g6_lzh_deviation', 'g7_deviation', 'g9_deviation', 'pulse',
                         'qrs_deviation', 'qt_deviation', 'pq_deviation', 'p_deviation',
                         't_normal', 'bcp_deviation']
            
            for field_name in ecg_fields:
                if field_name in self.ecg_vars:
                    ecg_values.append(1 if self.ecg_vars[field_name].get() else 0)
                else:
                    ecg_values.append(0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute("""
                INSERT INTO ecg_data (
                    patient_id, g1_deviation, g2_lzh_deviation, g3_deviation, g3_lzh_deviation,
                    g6_lzh_deviation, g7_deviation, g9_deviation, pulse, qrs_deviation,
                    qt_deviation, pq_deviation, p_deviation, t_normal, bcp_deviation
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, tuple([self.parent_app.current_patient_id] + ecg_values))
            
            conn.commit()
            conn.close()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –≠–ö–ì —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≠–ö–ì: {str(e)}")
    
    def save_echo_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≠–•–û-–ö–ì"""
        if not self.parent_app.current_patient_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
            return
        
        try:
            conn = sqlite3.connect('medical_system.db')
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≠–•–û-–ö–ì –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS echo_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    patient_id INTEGER,
                    lv_edd REAL,
                    lv_esd REAL,
                    lv_pw_thickness REAL,
                    ivs_thickness REAL,
                    lv_ef REAL,
                    la_diameter REAL,
                    rv_diameter REAL,
                    aorta_diameter REAL,
                    pa_systolic_pressure REAL,
                    FOREIGN KEY (patient_id) REFERENCES patients (id)
                )
            ''')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            cursor.execute("DELETE FROM echo_data WHERE patient_id=?", (self.parent_app.current_patient_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            echo_values = []
            echo_fields = ['lv_edd', 'lv_esd', 'lv_pw_thickness', 'ivs_thickness', 'lv_ef',
                          'la_diameter', 'rv_diameter', 'aorta_diameter', 'pa_systolic_pressure']
            
            for field_name in echo_fields:
                if field_name in self.echo_fields:
                    try:
                        value = float(self.echo_fields[field_name].get()) if self.echo_fields[field_name].get().strip() else None
                        echo_values.append(value)
                    except ValueError:
                        echo_values.append(None)
                else:
                    echo_values.append(None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute("""
                INSERT INTO echo_data (
                    patient_id, lv_edd, lv_esd, lv_pw_thickness, ivs_thickness,
                    lv_ef, la_diameter, rv_diameter, aorta_diameter, pa_systolic_pressure
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, tuple([self.parent_app.current_patient_id] + echo_values))
            
            conn.commit()
            conn.close()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –≠–•–û-–ö–ì —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≠–•–û-–ö–ì: {str(e)}") 